<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>OpenAI 开发者论坛 - 最新帖子</title>
    <link>https://community.openai.com</link>
    <description>最新帖子</description>
    <lastBuildDate>Thu, 04 Jan 2024 01:14:29 GMT</lastBuildDate>
    <item>
      <title>将 pydantic 模式转变为函数/工具模式的规范方法？</title>
      <link>https://community.openai.com/t/canonical-way-of-turning-pydantic-schemas-into-function-tools-schemas/578189#post_4</link>
      <description><![CDATA[在 Langroid 中查看此代码 - 我们允许将工具/函数指定为 Pydantic 类以及关联的帮助器方法，并将它们转换为发送到 OpenAI API 作为函数规范所需的适当格式。我们还执行相反的操作 - 将 LLM JSON 输出与 Pydantic 类匹配并触发相应的处理程序。

  &lt;标题类=“来源”&gt;

      github.com


  &lt;文章类=“onebox-body”&gt;
    langroid/langroid/blob /main/langroid/agent/tool_message.py
&quot;&quot;&quot;
发送给代理的结构化消息（通常来自法学硕士），由
一个代理人。例如，这些消息可以表示：
- 提供给代理人的信息或数据
- 向代理人请求信息或数据
- 请求运行代理的方法
”“”

从 abc 导入 ABC
从随机导入选择
从输入导入 Any、Dict、List、Type

从 docstring_parser 导入解析
从 pydantic 导入 BaseModel

从 langroid.language_models.base 导入 LLMFunctionSpec
从 langroid.utils.pydantic_utils 导入 _recursive_purge_dict_key


类 ToolMessage(ABC, BaseModel):




  该文件已被截断。 显示原文





（Langroid 是一个面向 Agent 的 LLM 编程 Python 框架，来自前 CMU/UW-Madison 研究人员）。
您可以在此 Colab 快速入门中看到基于 Pydantic 的函数/工具的示例，该系统构建了一个 2 代理系统，其中一个代理通过向另一个启用 RAG 的代理发送问题来从文档中收集结构化信息： 

  &lt;标题类=“来源”&gt;
      
colab.research。 google.com


  &lt;文章类=“onebox-body”&gt;
    
Google合作实验室




]]></description>
      <guid>https://community.openai.com/t/canonical-way-of-turning-pydantic-schemas-into-function-tools-schemas/578189#post_4</guid>
      <pubDate>Thu, 04 Jan 2024 01:04:46 GMT</pubDate>
    </item>
    <item>
      <title>2023 年 DALLE3 画廊：分享您的创作</title>
      <link>https://community.openai.com/t/dalle3-gallery-for-2023-share-your-creations/431189?page=17#post_339</link>
      <description><![CDATA[]]></description>
      <guid>https://community.openai.com/t/dalle3-gallery-for-2023-share-your-creations/431189?page=17#post_339</guid>
      <pubDate>Thu, 04 Jan 2024 00:45:21 GMT</pubDate>
    </item>
    </channel>
</rss>