<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>OpenAI 开发者论坛 - 最新帖子</title>
    <link>https://community.openai.com</link>
    <description>最新帖子</description>
    <lastBuildDate>Thu, 28 Mar 2024 06:23:02 GMT</lastBuildDate>
    <item>
      <title>无法在 open ai 聊天完成 API 中维护用户会话</title>
      <link>https://community.openai.com/t/unable-to-maintain-user-session-in-open-ai-chat-completion-api/300991#post_14</link>
      <description><![CDATA[@sps 嘿frds，你能帮助我吗？我正在使用 openai 和 llamaindex 创建聊天机器人。我已经成功实现了流程。但是，在现场，如果一个用户问一些问题，它会正确响应，而另一个用户问一些问题，也回答得很好，但我会将历史记录提供给 openai 请求，但所有用户聊天历史记录都会合并同时将历史记录插入到请求中。解决办法是什么。
从 Flask 导入 Flask、请求、jsonify、响应
从 llama_index.core 导入 VectorStoreIndex、SimpleDirectoryReader
从 llama_index.core.memory 导入 ChatMemoryBuffer
从 llama_index.llms.openai 导入 OpenAI
从 llama_index.llms.openai.base 导入 ChatResponse
导入操作系统
导入时间
导入openai
导入json
从 dotenv 导入 load_dotenv
load_dotenv()
os.environ[“OPENAI_API_KEY”] = os.getenv(&#39;OPENAI_API_KEY&#39;)
openai.api_key = os.environ[“OPENAI_API_KEY”]
app = Flask(名称)
内存 = ChatMemoryBuffer.from_defaults(token_limit=8000)
llm = OpenAI(model=“gpt-3.5-turbo”, 温度=0)
data = SimpleDirectoryReader(input_dir=“data”).load_data()
index = VectorStoreIndex.from_documents(data)
chat_engine = index.as_chat_engine(
chat_mode=“上下文”，
llm=llm,
内存=内存，
系统提示=(
“你的名字是克拉鲁斯。你是一个聊天机器人，能够进行正常的交互，也能够说话”
“关于克拉鲁斯货币项目相关的疑问”
“如果用户的查询与提供的上下文相关，则需要在响应消息 JSON 中使用上下文中的正确响应消息进行回答”
 &#39;&#39;&#39;以正确的 JSON 格式给出所有响应，例如 { &quot;response&quot;: &quot;查询的响应消息&quot;, &quot;intent&quot;: &quot;查询的意图&quot; }&#39;&#39;&#39;
),

)
defgenerate_chat_responses(查询):
res=‘’
响应 = chat_engine.stream_chat(query)
对于response.response_gen中的令牌：
res += 令牌
返回结果
@app.route(“/voice-backend”,methods=[‘POST’])
def voiceAssistant():
数据 = request.get_json()
query = data.get(&#39;提示&#39;)


尝试：

    返回 jsonify({&quot;satus&quot;: 200, &quot;data&quot;:generate_chat_responses(query)})
    
除了异常 e：
    打印（“异常：”，e）

如果名称 == ‘ma​​in’:
app.run（调试=True，端口=8080）]]></description>
      <guid>https://community.openai.com/t/unable-to-maintain-user-session-in-open-ai-chat-completion-api/300991#post_14</guid>
      <pubDate>Thu, 28 Mar 2024 06:17:55 GMT</pubDate>
    </item>
    <item>
      <title>无法在 open ai 聊天完成 API 中维护用户会话</title>
      <link>https://community.openai.com/t/unable-to-maintain-user-session-in-open-ai-chat-completion-api/300991#post_13</link>
      <description><![CDATA[@novaphil 嘿frds，你能帮助我吗？我正在使用 openai 和 llamaindex 创建聊天机器人。我已经成功实现了流程。但是，在现场，如果一个用户问一些问题，它会正确响应，而另一个用户问一些问题，也回答得很好，但我会将历史记录提供给 openai 请求，但所有用户聊天历史记录都会合并同时将历史记录插入到请求中。解决办法是什么。
从 Flask 导入 Flask、请求、jsonify、响应
从 llama_index.core 导入 VectorStoreIndex、SimpleDirectoryReader
从 llama_index.core.memory 导入 ChatMemoryBuffer
从 llama_index.llms.openai 导入 OpenAI
从 llama_index.llms.openai.base 导入 ChatResponse
导入操作系统
导入时间
导入openai
导入json
从 dotenv 导入 load_dotenv
load_dotenv()
os.environ[“OPENAI_API_KEY”] = os.getenv(&#39;OPENAI_API_KEY&#39;)
openai.api_key = os.environ[“OPENAI_API_KEY”]
app = Flask(名称)
内存 = ChatMemoryBuffer.from_defaults(token_limit=8000)
llm = OpenAI(model=“gpt-3.5-turbo”, 温度=0)
data = SimpleDirectoryReader(input_dir=“data”).load_data()
index = VectorStoreIndex.from_documents(data)
chat_engine = index.as_chat_engine(
chat_mode=“上下文”，
llm=llm,
内存=内存，
系统提示=(
“你的名字是克拉鲁斯。你是一个聊天机器人，能够进行正常的交互，也能够说话”
“关于克拉鲁斯货币项目相关的疑问”
“如果用户的查询与提供的上下文相关，则需要在响应消息 JSON 中使用上下文中的正确响应消息进行回答”
 &#39;&#39;&#39;以正确的 JSON 格式给出所有响应，例如 { &quot;response&quot;: &quot;查询的响应消息&quot;, &quot;intent&quot;: &quot;查询的意图&quot; }&#39;&#39;&#39;
),

)
defgenerate_chat_responses(查询):
res=‘’
响应 = chat_engine.stream_chat(query)
对于response.response_gen中的令牌：
res += 令牌
返回结果
@app.route(“/voice-backend”,methods=[‘POST’])
def voiceAssistant():
数据 = request.get_json()
query = data.get(&#39;提示&#39;)


尝试：

    返回 jsonify({&quot;satus&quot;: 200, &quot;data&quot;:generate_chat_responses(query)})
    
除了异常 e：
    打印（“异常：”，e）

如果名称 == ‘ma​​in’:
app.run（调试=True，端口=8080）]]></description>
      <guid>https://community.openai.com/t/unable-to-maintain-user-session-in-open-ai-chat-completion-api/300991#post_13</guid>
      <pubDate>Thu, 28 Mar 2024 06:17:08 GMT</pubDate>
    </item>
    <item>
      <title>朗读功能无法通过 Firefox 在 ChatGPT 上运行</title>
      <link>https://community.openai.com/t/read-aloud-feature-not-working-on-chatgpt-via-firefox/664947#post_15</link>
      <description><![CDATA[我现在有了一个新的第二个系统（赢得 11 个最先进的一切）
新系统 Firefox 120.01 - 是 - 朗读效果完美
旧系统 Win 10 Firefox 120.01 - 否 - 大声朗读显示正在播放但没有声音]]></description>
      <guid>https://community.openai.com/t/read-aloud-feature-not-working-on-chatgpt-via-firefox/664947#post_15</guid>
      <pubDate>Thu, 28 Mar 2024 06:09:21 GMT</pubDate>
    </item>
    <item>
      <title>Gradio 聊天机器人：部署、提取对话历史、模拟对话</title>
      <link>https://community.openai.com/t/gradio-chatbot-deployment-extracting-conversation-history-simulated-conversations/699924#post_2</link>
      <description><![CDATA[幸运的是，所有这些都相当简单。您只需要一些关键见解。我会很快制作出原型。]]></description>
      <guid>https://community.openai.com/t/gradio-chatbot-deployment-extracting-conversation-history-simulated-conversations/699924#post_2</guid>
      <pubDate>Thu, 28 Mar 2024 05:58:44 GMT</pubDate>
    </item>
    <item>
      <title>OpenAI 新商标：VOICE ENGINE</title>
      <link>https://community.openai.com/t/new-openai-trademark-voice-engine/692713#post_11</link>
      <description><![CDATA[有几件事仍然让我担心 OpenAI：


围绕路线图、所使用的数据集持续保密。我知道他们选择将“开放”解释为不意味着开源，这很好，但是这里到底什么是开放呢？几乎没有。他们做的事情与任何非开放商业服务没有什么不同。我觉得这最终必然会导致问题。


这是为一个小世界提供的全球服务，但产品中的美国偏见程度相当惊人。例如，当前所有的声音都非常美国化（除了英国的声音）。即使只是英语，世界各地也有很多口音。我真的希望新的语音项目有所改变，并且语音选择是完全可定制和包容的。

]]></description>
      <guid>https://community.openai.com/t/new-openai-trademark-voice-engine/692713#post_11</guid>
      <pubDate>Thu, 28 Mar 2024 05:48:34 GMT</pubDate>
    </item>
    <item>
      <title>如何让助手返回JSON？</title>
      <link>https://community.openai.com/t/how-to-make-assistant-return-json/484881#post_10</link>
      <description><![CDATA[不使用函数和额外调用的简单快速解决方法只是告诉它使用特定键以 json 格式返回。如果请求的格式不太复杂，可以提供格式的上下文。如果使用 python 等，则解析格式化的字符串。]]></description>
      <guid>https://community.openai.com/t/how-to-make-assistant-return-json/484881#post_10</guid>
      <pubDate>Thu, 28 Mar 2024 05:46:55 GMT</pubDate>
    </item>
    <item>
      <title>如何通过 API 密钥跟踪 API 使用情况和费用？</title>
      <link>https://community.openai.com/t/how-to-track-api-usage-and-cost-by-api-key/174145?page=4#post_68</link>
      <description><![CDATA[也许您已经注意到，但在 API 密钥页面上，您需要为旧 API 密钥单独启用每个 API 密钥的跟踪 - 这就是您从“打开跟踪”链接进入此页面的原因。默认情况下会跟踪新的 API 密钥。]]></description>
      <guid>https://community.openai.com/t/how-to-track-api-usage-and-cost-by-api-key/174145?page=4#post_68</guid>
      <pubDate>Thu, 28 Mar 2024 05:42:42 GMT</pubDate>
    </item>
    <item>
      <title>如何通过 API 密钥跟踪 API 使用情况和费用？</title>
      <link>https://community.openai.com/t/how-to-track-api-usage-and-cost-by-api-key/174145?page=4#post_67</link>
      <description><![CDATA[（帖子已被作者删除）]]></description>
      <guid>https://community.openai.com/t/how-to-track-api-usage-and-cost-by-api-key/174145?page=4#post_67</guid>
      <pubDate>Thu, 28 Mar 2024 05:39:41 GMT</pubDate>
    </item>
    </channel>
</rss>